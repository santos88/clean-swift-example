//
//  ListBreedsViewController.swift
//  DogsApiCleanSwiftExample
//
//  Created by Santos Ramon on 10/10/18.
//  Copyright (c) 2018 Santos Ramon. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListBreedsDisplayLogic: class {
    func displayBreeds(viewModel: ListBreeds.InitialLoad.ViewModel)
    func displayDetailBreed()
}

class ListBreedsViewController: UIViewController, ListBreedsDisplayLogic {
    @IBOutlet weak var tableView: UITableView!
    var interactor: ListBreedsBusinessLogic?
    var router: (NSObjectProtocol & ListBreedsRoutingLogic & ListBreedsDataPassing)?
    var viewModel: ListBreeds.InitialLoad.ViewModel?

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = ListBreedsInteractor()
        let presenter = ListBreedsPresenter()
        let router = ListBreedsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        registerCells()
        initialLoad()
    }

    func registerCells() {
        self.tableView.register(UITableViewCell.self, forCellReuseIdentifier: "basicCell")
    }

    func initialLoad() {
        let request = ListBreeds.InitialLoad.Request()
        interactor?.initialLoad(request: request)
    }

    func displayBreeds(viewModel: ListBreeds.InitialLoad.ViewModel) {
        self.viewModel = viewModel
        DispatchQueue.main.async {
            self.tableView.reloadData()
        }
    }

    func displayDetailBreed() {
        performSegue(withIdentifier: "DetailBreed", sender: self)
    }
}

extension ListBreedsViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        guard let viewModel = viewModel else { return 0 }
        return viewModel.breeds.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell =  tableView.dequeueReusableCell(withIdentifier: "basicCell")
        cell?.textLabel?.text = viewModel?.breeds[indexPath.row]
        return cell!
    }
}

extension ListBreedsViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        interactor?.select(row: indexPath.row)
    }
}

