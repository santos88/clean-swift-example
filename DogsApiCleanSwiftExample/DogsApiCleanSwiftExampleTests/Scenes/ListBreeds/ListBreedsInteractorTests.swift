//
//  ListBreedsInteractorTests.swift
//  DogsApiCleanSwiftExample
//
//  Created by Santos Ramon on 10/10/18.
//  Copyright (c) 2018 Santos Ramon. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import DogsApiCleanSwiftExample
import XCTest

class ListBreedsInteractorTests: XCTestCase {
    // MARK: Subject under test

    var sut: ListBreedsInteractor!

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        setupListBreedsInteractor()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup

    func setupListBreedsInteractor() {
        sut = ListBreedsInteractor()
    }

    // MARK: Test doubles

    class ListBreedsPresentationLogicSpy: ListBreedsPresentationLogic {
        var presentListBreedsCalled = false
        var presentDetailBreedCalled = false

        func presentListBreeds(response: ListBreeds.InitialLoad.Response) {
            presentListBreedsCalled = true
        }

        func presentDetailBreed() {
            presentDetailBreedCalled = true
        }

    }

    class WorkerSpy: ListBreedsWorkerProtocol {
        func listAllBreeds(completion: @escaping (BreedsApiResponseModel?, Error?) -> Void) {
            let model = BreedsApiResponseModel(status: "ok", message: ["pekines", "bulldog"])
            completion(model, nil)
        }
    }

    // MARK: Tests

    func testInitialLoad() {
        // Given
        let spy = ListBreedsPresentationLogicSpy()
        sut.presenter = spy
        sut.worker = WorkerSpy()
        let request = ListBreeds.InitialLoad.Request()

        // When
        sut.initialLoad(request: request)

        // Then
        XCTAssertTrue(spy.presentListBreedsCalled, "initialLoad(request:) should ask the presenter to format the result")

    }


    func testSelectRow() {
        // Given
        let spy = ListBreedsPresentationLogicSpy()
        sut.presenter = spy
        sut.breeds = ["pekines", "bulldog"]

        // When
        sut.select(row: 1)

        // Then
        XCTAssertTrue(spy.presentDetailBreedCalled, "select(row:) should ask the presenter to present the detail")
    }
}
